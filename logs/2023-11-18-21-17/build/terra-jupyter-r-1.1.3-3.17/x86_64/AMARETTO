+ Rscript -e 'Sys.setenv(BIOCONDUCTOR_USE_CONTAINER_REPOSITORY=FALSE); p <- .libPaths(); p <- c('\''/tmp/tmp/built'\'', p); .libPaths(p); if(BiocManager::install('\''AMARETTO'\'', INSTALL_opts = '\''--build'\'', update = TRUE, quiet = FALSE, dependencies=TRUE, force = TRUE, keep_outputs = TRUE) %in% rownames(installed.packages())) q(status = 0) else q(status = 1)'
'getOption("repos")' replaces Bioconductor standard repositories, see
'help("repositories", package = "BiocManager")' for details.
Replacement repositories:
    CRAN: https://cloud.r-project.org
Bioconductor version 3.17 (BiocManager 1.30.22), R 4.3.1 (2023-06-16)
Installing package(s) 'AMARETTO'
also installing the dependencies ‘rhdf5’, ‘rhdf5filters’, ‘Rhdf5lib’, ‘iterators’, ‘GetoptLong’, ‘clue’, ‘GlobalOptions’, ‘BiocBaseUtils’, ‘shape’, ‘HDF5Array’, ‘bookdown’, ‘impute’, ‘doParallel’, ‘ComplexHeatmap’, ‘MultiAssayExperiment’, ‘circlize’, ‘curatedTCGAData’, ‘foreach’, ‘glmnet’, ‘BiocStyle’

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/rhdf5_2.44.0.tar.gz'
Content type 'application/gzip' length 1249545 bytes (1.2 MB)
==================================================
downloaded 1.2 MB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/rhdf5filters_1.12.1.tar.gz'
Content type 'application/gzip' length 1174259 bytes (1.1 MB)
==================================================
downloaded 1.1 MB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/Rhdf5lib_1.22.1.tar.gz'
Content type 'application/gzip' length 12083420 bytes (11.5 MB)
==================================================
downloaded 11.5 MB

trying URL 'https://cloud.r-project.org/src/contrib/iterators_1.0.14.tar.gz'
Content type 'application/x-gzip' length 300266 bytes (293 KB)
==================================================
downloaded 293 KB

trying URL 'https://cloud.r-project.org/src/contrib/GetoptLong_1.0.5.tar.gz'
Content type 'application/x-gzip' length 767681 bytes (749 KB)
==================================================
downloaded 749 KB

trying URL 'https://cloud.r-project.org/src/contrib/clue_0.3-65.tar.gz'
Content type 'application/x-gzip' length 604491 bytes (590 KB)
==================================================
downloaded 590 KB

trying URL 'https://cloud.r-project.org/src/contrib/GlobalOptions_0.1.2.tar.gz'
Content type 'application/x-gzip' length 305898 bytes (298 KB)
==================================================
downloaded 298 KB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/BiocBaseUtils_1.2.0.tar.gz'
Content type 'application/gzip' length 227873 bytes (222 KB)
==================================================
downloaded 222 KB

trying URL 'https://cloud.r-project.org/src/contrib/shape_1.4.6.tar.gz'
Content type 'application/x-gzip' length 677262 bytes (661 KB)
==================================================
downloaded 661 KB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/HDF5Array_1.28.1.tar.gz'
Content type 'application/gzip' length 8097342 bytes (7.7 MB)
==================================================
downloaded 7.7 MB

trying URL 'https://cloud.r-project.org/src/contrib/bookdown_0.37.tar.gz'
Content type 'application/x-gzip' length 858915 bytes (838 KB)
==================================================
downloaded 838 KB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/impute_1.74.1.tar.gz'
Content type 'application/gzip' length 641576 bytes (626 KB)
==================================================
downloaded 626 KB

trying URL 'https://cloud.r-project.org/src/contrib/doParallel_1.0.17.tar.gz'
Content type 'application/x-gzip' length 164254 bytes (160 KB)
==================================================
downloaded 160 KB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/ComplexHeatmap_2.16.0.tar.gz'
Content type 'application/gzip' length 1454886 bytes (1.4 MB)
==================================================
downloaded 1.4 MB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/MultiAssayExperiment_1.26.0.tar.gz'
Content type 'application/gzip' length 1179315 bytes (1.1 MB)
==================================================
downloaded 1.1 MB

trying URL 'https://cloud.r-project.org/src/contrib/circlize_0.4.15.tar.gz'
Content type 'application/x-gzip' length 2497140 bytes (2.4 MB)
==================================================
downloaded 2.4 MB

trying URL 'https://bioconductor.org/packages/3.17/data/experiment/src/contrib/curatedTCGAData_1.22.2.tar.gz'
Content type 'application/gzip' length 398452 bytes (389 KB)
==================================================
downloaded 389 KB

trying URL 'https://cloud.r-project.org/src/contrib/foreach_1.5.2.tar.gz'
Content type 'application/x-gzip' length 89758 bytes (87 KB)
==================================================
downloaded 87 KB

trying URL 'https://cloud.r-project.org/src/contrib/glmnet_4.1-8.tar.gz'
Content type 'application/x-gzip' length 2439515 bytes (2.3 MB)
==================================================
downloaded 2.3 MB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/BiocStyle_2.28.1.tar.gz'
Content type 'application/gzip' length 788179 bytes (769 KB)
==================================================
downloaded 769 KB

trying URL 'https://bioconductor.org/packages/3.17/bioc/src/contrib/AMARETTO_1.16.0.tar.gz'
Content type 'application/gzip' length 3372493 bytes (3.2 MB)
==================================================
downloaded 3.2 MB

* installing *source* package ‘Rhdf5lib’ ...
** using staged installation
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether the compiler supports GNU C++... yes
checking whether g++ -std=gnu++17 accepts -g... yes
checking for g++ -std=gnu++17 option to enable C++11 features... none needed
COMPILER = gcc
checking whether C compiler accepts -w... yes
checking whether to use -Wl,-rpath setting... yes
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for zlib.h... yes
checking for szlib.h... yes
checking for libaec.h... yes
checking for SZ_BufftoBuffCompress in -lsz... yes
checking for aec_buffer_encode in -lsz... yes
checking for curl/curl.h... yes
checking for openssl/evp.h... yes
checking for openssl/hmac.h... yes
checking for openssl/sha.h... yes
checking for curl_global_init in -lcurl... yes
checking for EVP_sha256 in -lcrypto... yes
S3_VFD=--enable-ros3-vfd
configure: creating ./config.status
config.status: creating src/Makevars
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
gunzip -dc hdf5small_cxx_hl_1.10.7.tar.gz | tar xf -;
cd hdf5; \
./configure --with-pic --enable-shared=no --enable-cxx --enable-hl \
--enable-tests=no --enable-tools=no \
--with-szlib=yes --with-zlib=yes \
--enable-ros3-vfd \
--enable-sharedlib-rpath \
CC='gcc' CXX='g++ -std=gnu++17' \
CPPFLAGS='' \
CFLAGS='-g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -w -fpic' \
CXXFLAGS='-w -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic' \
AR='ar' RANLIB='ranlib' \
LDFLAGS='-Wl,-Bsymbolic-functions -Wl,-z,relro'; \
make lib
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
checking for gawk... no
checking for mawk... mawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking whether to enable maintainer-specific portions of Makefiles... no
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking shell variables initial values... done
checking if basename works... yes
checking if xargs works... yes
checking for cached host... none
checking for config x86_64-unknown-linux-gnu... no
checking for config x86_64-unknown-linux-gnu... no
checking for config unknown-linux-gnu... no
checking for config unknown-linux-gnu... no
checking for config x86_64-linux-gnu... no
checking for config x86_64-linux-gnu... no
checking for config x86_64-unknown... no
checking for config linux-gnu... found
compiler 'gcc' is GNU gcc-9.4.0
compiler 'gfortran' is GNU gfortran-9.4.0
compiler 'g++ -std=gnu++17' is GNU g++-9.4.0
checking for config ./config/site-specific/host-buildkitsandbox... no
checking for clang sanitizer checks... checking build mode... production
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking if unsupported combinations of configure options are allowed... no
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for off_t... yes
checking for size_t... yes
checking for ssize_t... yes
checking for ptrdiff_t... yes
checking whether byte ordering is bigendian... no
checking size of char... 1
checking size of short... 2
checking size of int... 4
checking size of unsigned... 4
checking size of long... 8
checking size of long long... 8
checking size of __int64... 0
checking size of float... 4
checking size of double... 8
checking size of long double... 16
checking size of __float128... 16
checking size of _Quad... 0
checking quadmath.h usability... yes
checking quadmath.h presence... yes
checking for quadmath.h... yes
checking maximum decimal precision for C... 33
checking if Fortran interface enabled... no
checking whether we are using the GNU C++ compiler... yes
checking whether g++ -std=gnu++17 accepts -g... yes
checking dependency style of g++ -std=gnu++17... gcc3
checking how to run the C++ preprocessor... g++ -std=gnu++17 -E
checking if c++ interface enabled... yes
checking if g++ -std=gnu++17 needs old style header files in includes... no
checking if g++ -std=gnu++17 can handle namespaces... yes
checking if g++ -std=gnu++17 can handle static cast... yes
checking if g++ -std=gnu++17 has offsetof extension... yes
checking if the high-level library is enabled... yes
checking whether make sets $(MAKE)... (cached) yes
checking for tr... /usr/bin/tr
checking if srcdir= and time commands work together... no
checking if Java JNI interface enabled... no
checking if building tests is disabled... Building HDF5 tests is disabled
checking if building tools is disabled... Building HDF5 tools is disabled
checking how to print strings... printf
checking for a sed that does not truncate output... /bin/sed
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 3145728
checking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop
checking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop
checking for /usr/bin/ld option to reload object files... -r
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /usr/bin/dd
checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... yes
checking for gcc option to produce PIC... -fPIC -DPIC
checking if gcc PIC flag -fPIC -DPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking for shl_load... no
checking for shl_load in -ldld... no
checking for dlopen... no
checking for dlopen in -ldl... yes
checking whether a program can dlopen itself... yes
checking whether a statically linked program can dlopen itself... no
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
checking how to run the C++ preprocessor... g++ -std=gnu++17 -E
checking for ld used by g++ -std=gnu++17... /usr/bin/ld -m elf_x86_64
checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes
checking whether the g++ -std=gnu++17 linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking for g++ -std=gnu++17 option to produce PIC... -fPIC -DPIC
checking if g++ -std=gnu++17 PIC flag -fPIC -DPIC works... yes
checking if g++ -std=gnu++17 static flag -static works... yes
checking if g++ -std=gnu++17 supports -c -o file.o... yes
checking if g++ -std=gnu++17 supports -c -o file.o... (cached) yes
checking whether the g++ -std=gnu++17 linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... (cached) GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking if we should install only statically linked executables... no
checking if -Wl,-rpath should be used to link shared libs in nondefault directories... yes
checking for ceil in -lm... yes
checking for dlopen in -ldl... (cached) yes
checking for ANSI C header files... (cached) yes
checking whether time.h and sys/time.h may both be included... yes
checking sys/resource.h usability... yes
checking sys/resource.h presence... yes
checking for sys/resource.h... yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking for unistd.h... (cached) yes
checking sys/ioctl.h usability... yes
checking sys/ioctl.h presence... yes
checking for sys/ioctl.h... yes
checking for sys/stat.h... (cached) yes
checking sys/socket.h usability... yes
checking sys/socket.h presence... yes
checking for sys/socket.h... yes
checking for sys/types.h... (cached) yes
checking sys/file.h usability... yes
checking sys/file.h presence... yes
checking for sys/file.h... yes
checking stddef.h usability... yes
checking stddef.h presence... yes
checking for stddef.h... yes
checking setjmp.h usability... yes
checking setjmp.h presence... yes
checking for setjmp.h... yes
checking features.h usability... yes
checking features.h presence... yes
checking for features.h... yes
checking dirent.h usability... yes
checking dirent.h presence... yes
checking for dirent.h... yes
checking for stdint.h... (cached) yes
checking stdbool.h usability... yes
checking stdbool.h presence... yes
checking for stdbool.h... yes
checking netdb.h usability... yes
checking netdb.h presence... yes
checking for netdb.h... yes
checking netinet/in.h usability... yes
checking netinet/in.h presence... yes
checking for netinet/in.h... yes
checking arpa/inet.h usability... yes
checking arpa/inet.h presence... yes
checking for arpa/inet.h... yes
checking io.h usability... no
checking io.h presence... no
checking for io.h... no
checking winsock2.h usability... no
checking winsock2.h presence... no
checking for winsock2.h... no
checking sys/timeb.h usability... yes
checking sys/timeb.h presence... yes
checking for sys/timeb.h... yes
checking for _FILE_OFFSET_BITS value needed for large files... no
checking size of int8_t... 1
checking size of uint8_t... 1
checking size of int_least8_t... 1
checking size of uint_least8_t... 1
checking size of int_fast8_t... 1
checking size of uint_fast8_t... 1
checking size of int16_t... 2
checking size of uint16_t... 2
checking size of int_least16_t... 2
checking size of uint_least16_t... 2
checking size of int_fast16_t... 8
checking size of uint_fast16_t... 8
checking size of int32_t... 4
checking size of uint32_t... 4
checking size of int_least32_t... 4
checking size of uint_least32_t... 4
checking size of int_fast32_t... 8
checking size of uint_fast32_t... 8
checking size of int64_t... 8
checking size of uint64_t... 8
checking size of int_least64_t... 8
checking size of uint_least64_t... 8
checking size of int_fast64_t... 8
checking size of uint_fast64_t... 8
checking size of size_t... 8
checking size of ssize_t... 8
checking size of ptrdiff_t... 8
checking size of off_t... 8
checking size of bool... 1
checking size of time_t... 8
checking if dev_t is scalar... yes
checking for dmalloc library... suppressed
checking zlib.h usability... yes
checking zlib.h presence... yes
checking for zlib.h... yes
checking for compress2 in -lz... yes
checking for compress2... yes
checking szlib.h usability... yes
checking szlib.h presence... yes
checking for szlib.h... yes
checking libaec.h usability... yes
checking libaec.h presence... yes
checking for libaec.h... yes
checking for aec_encode in -laec... yes
checking for SZ_BufftoBuffCompress in -lsz... yes
checking for szlib encoder... yes
checking for thread safe support... no
checking whether CLOCK_MONOTONIC is declared... yes
checking for tm_gmtoff in struct tm... yes
checking for global timezone variable... yes
checking for st_blocks in struct stat... no
checking for _getvideoconfig... no
checking for gettextinfo... no
checking for GetConsoleScreenBufferInfo... no
checking for getpwuid... yes
checking for _scrsize... no
checking for ioctl... yes
checking for struct videoconfig... no
checking for struct text_info... no
checking for TIOCGWINSZ... yes
checking for TIOCGETD... yes
checking for library containing clock_gettime... none required
checking for alarm... yes
checking for clock_gettime... yes
checking for difftime... yes
checking for fcntl... yes
checking for flock... yes
checking for fork... yes
checking for frexpf... yes
checking for frexpl... yes
checking for gethostname... yes
checking for getrusage... yes
checking for gettimeofday... yes
checking for lstat... yes
checking for rand_r... yes
checking for random... yes
checking for setsysinfo... no
checking for signal... yes
checking for longjmp... yes
checking for setjmp... yes
checking for siglongjmp... yes
checking for sigsetjmp... no
checking for sigprocmask... yes
checking for snprintf... yes
checking for srandom... yes
checking for strdup... yes
checking for symlink... yes
checking for system... yes
checking for strtoll... yes
checking for strtoull... yes
checking for tmpfile... yes
checking for asprintf... yes
checking for vasprintf... yes
checking for vsnprintf... yes
checking for waitpid... yes
checking for roundf... yes
checking for lroundf... yes
checking for llroundf... yes
checking for round... yes
checking for lround... yes
checking for llround... yes
checking for an ANSI C-conforming const... yes
checking if the compiler understands  __inline__... yes
checking if the compiler understands __inline... yes
checking if the compiler understands inline... yes
checking for __attribute__ extension... yes
checking for __func__ extension... yes
checking for __FUNCTION__ extension... yes
checking for C99 designated initialization support... yes
checking how to print long long... %ld and %lu
checking enable debugging symbols... no
checking enable asserts... no
checking enable developer warnings... no
checking profiling... no
checking optimization level... high
checking enable file locking... best-effort
checking for internal debug output... none
checking whether function stack tracking is enabled... no
checking for API tracing... no
checking whether a memory checking tool will be used... no
checking whether internal memory allocation sanity checking is used... no
checking for parallel support files... skipped
checking whether O_DIRECT is declared... yes
checking for posix_memalign... yes
checking if the direct I/O virtual file driver (VFD) is enabled... no
checking if the Mirror virtual file driver (VFD) is enabled... no
checking curl/curl.h usability... yes
checking curl/curl.h presence... yes
checking for curl/curl.h... yes
checking openssl/evp.h usability... yes
checking openssl/evp.h presence... yes
checking for openssl/evp.h... yes
checking openssl/hmac.h usability... yes
checking openssl/hmac.h presence... yes
checking for openssl/hmac.h... yes
checking openssl/sha.h usability... yes
checking openssl/sha.h presence... yes
checking for openssl/sha.h... yes
checking for curl_global_init in -lcurl... yes
checking for EVP_sha256 in -lcrypto... yes
checking if the Read-Only S3 virtual file driver (VFD) is enabled... yes
checking for libhdfs... suppressed
checking for custom examples path definition... ${prefix}/share/hdf5_examples
checking for custom plugin default path definition... /usr/local/hdf5/lib/plugin
checking whether exception handling functions is checked during data conversions... yes
checking whether data accuracy is guaranteed during data conversions... yes
checking if the machine has window style path name... no
checking if using special algorithm to convert long double to (unsigned) long values... no
checking if using special algorithm to convert (unsigned) long to long double values... no
checking if correctly converting long double to (unsigned) long long values... yes
checking if correctly converting (unsigned) long long to long double values... yes
checking if the system is IBM ppc64le and cannot correctly convert some long double values... no
checking additional programs should be built... no
checking if deprecated public symbols are available... yes
checking which version of public symbols to use by default... v110
checking whether to perform strict file format checks... no
checking for pread... yes
checking for pwrite... yes
checking whether to use pread/pwrite instead of read/write in certain VFDs... yes
checking whether to have library information embedded in the executables... yes
checking if alignment restrictions are strictly enforced... no
configure: creating ./config.lt
config.lt: creating libtool
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating src/libhdf5.settings
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating utils/Makefile
config.status: creating utils/mirror_vfd/Makefile
config.status: creating bin/h5cc
config.status: creating bin/Makefile
config.status: creating c++/Makefile
config.status: creating c++/src/Makefile
config.status: creating c++/src/h5c++
config.status: creating hl/Makefile
config.status: creating hl/src/Makefile
config.status: creating hl/c++/Makefile
config.status: creating hl/c++/src/Makefile
config.status: creating src/H5config.h
config.status: executing pubconf commands
creating src/H5pubconf.h
Post process src/libhdf5.settings
config.status: executing depfiles commands
config.status: executing libtool commands
config.status: executing .classes commands
	    SUMMARY OF THE HDF5 CONFIGURATION
	    =================================

General Information:
-------------------
                   HDF5 Version: 1.10.7
                  Configured on: Mon Feb 12 19:15:40 UTC 2024
                  Configured by: root@buildkitsandbox
                    Host system: x86_64-unknown-linux-gnu
              Uname information: Linux buildkitsandbox 6.2.0-1019-azure #19~22.04.1-Ubuntu SMP Wed Jan 10 22:57:03 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
                       Byte sex: little-endian
             Installation point: /tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hdf5

Compiling Options:
------------------
                     Build Mode: production
              Debugging Symbols: no
                        Asserts: no
                      Profiling: no
             Optimization Level: high

Linking Options:
----------------
                      Libraries: static
  Statically Linked Executables: 
                        LDFLAGS: -Wl,-Bsymbolic-functions -Wl,-z,relro
                     H5_LDFLAGS: 
                     AM_LDFLAGS: 
                Extra libraries: -lcrypto -lcurl -lsz -laec -lz -ldl -lm 
                       Archiver: ar
                       AR_FLAGS: cr
                         Ranlib: ranlib

Languages:
----------
                              C: yes
                     C Compiler: /usr/bin/gcc
                       CPPFLAGS: 
                    H5_CPPFLAGS: -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L   -DNDEBUG -UH5_DEBUG_API
                    AM_CPPFLAGS: 
                        C Flags: -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -w -fpic
                     H5 C Flags:  -std=c99  -Wno-c++-compat -Wno-format-nonliteral -Wshadow -Wundef -Wwrite-strings -Wlarger-than=2560 -Wlogical-op -Wframe-larger-than=16384 -Wpacked-bitfield-compat -Wsync-nand -Wdouble-promotion -Wtrampolines -Wstack-usage=8192 -Wmaybe-uninitialized -Wdate-time -Warray-bounds=2 -Wc99-c11-compat -Wduplicated-cond -Whsa -Wnormalized -Wunused-const-variable -Walloca -Walloc-zero -Wduplicated-branches -Wimplicit-fallthrough=5 -Wrestrict -Wattribute-alias -Wshift-overflow=2 -Wattribute-alias=2 -Wmissing-profile -fstdarg-opt -s -Wno-aggregate-return -Wno-inline -Wno-missing-format-attribute -Wno-missing-noreturn -Wno-overlength-strings -Wno-jump-misses-init -Wno-suggest-attribute=const -Wno-suggest-attribute=noreturn -Wno-suggest-attribute=pure -Wno-suggest-attribute=format -Wno-suggest-attribute=cold -Wno-suggest-attribute=malloc -O3  -Werror=bad-function-cast -Werror=declaration-after-statement -Werror=implicit-function-declaration -Werror=missing-declarations -Werror=missing-prototypes -Werror=nested-externs -Werror=old-style-definition -Werror=packed -Werror=pointer-sign -Werror=pointer-to-int-cast -Werror=redundant-decls -Werror=strict-prototypes -Werror=switch -Wunused-function -Wformat -Werror=incompatible-pointer-types -Werror=shadow -Wcast-function-type -Wmaybe-uninitialized
                     AM C Flags: 
               Shared C Library: no
               Static C Library: yes


                        Fortran: no

                            C++: yes
                   C++ Compiler: /usr/bin/g++ -std=gnu++17
                      C++ Flags: -w -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic
                   H5 C++ Flags:   -Wall -Wconversion -Wctor-dtor-privacy -Wextra -Wfloat-equal -Wformat=2 -Winit-self -Winvalid-pch -Wmissing-include-dirs -Wno-format-nonliteral -Wnon-virtual-dtor -Woverloaded-virtual -Wreorder -Wshadow -Wsign-promo -Wundef -Wwrite-strings -pedantic -Wlarger-than=2560 -Wlogical-op -Wframe-larger-than=16384 -Wpacked-bitfield-compat -Wsync-nand -Wdouble-promotion -Wtrampolines -Wstack-usage=8192 -Wmaybe-uninitialized -Wdate-time -Wopenmp-simd -Warray-bounds=2 -Wduplicated-cond -Whsa -Wnormalized -Wunused-const-variable -Walloca -Walloc-zero -Wduplicated-branches -Wimplicit-fallthrough=5 -Wrestrict -Wattribute-alias -Wshift-overflow=2 -Wattribute-alias=2 -Wmissing-profile -fstdarg-opt -s -O3  -Wcast-align -Wmissing-declarations -Werror=packed -Werror=redundant-decls -Werror=switch -Wunused-but-set-variable -Werror=unused-function -Werror=unused-variable -Wunused-parameter -Werror=shadow
                   AM C++ Flags: 
             Shared C++ Library: no
             Static C++ Library: yes

                           Java: no


Features:
---------
                   Parallel HDF5: no
Parallel Filtered Dataset Writes: no
              Large Parallel I/O: no
              High-level library: yes
                Build HDF5 Tests: no
                Build HDF5 Tools: no
                    Threadsafety: no
             Default API mapping: v110
  With deprecated public symbols: yes
          I/O filters (external): deflate(zlib),szip(encoder)
                             MPE: no
                      Direct VFD: no
                      Mirror VFD: no
              (Read-Only) S3 VFD: yes
            (Read-Only) HDFS VFD: no
                         dmalloc: no
  Packages w/ extra debug output: none
                     API tracing: no
            Using memory checker: no
 Memory allocation sanity checks: no
          Function stack tracing: no
                Use file locking: best-effort
       Strict file format checks: no
    Optimization instrumentation: no
make[1]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5'
for d in src . c++ hl; do                                \
  if test $d != .; then                                        \
   (cd $d && make  lib) || exit 1;            \
  fi;                                                           \
done
make[2]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/src'
make[3]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/src'
  CC       H5.lo
  CC       H5checksum.lo
  CC       H5dbg.lo
  CC       H5system.lo
  CC       H5timer.lo
  CC       H5trace.lo
  CC       H5A.lo
  CC       H5Abtree2.lo
  CC       H5Adense.lo
  CC       H5Adeprec.lo
  CC       H5Aint.lo
  CC       H5Atest.lo
  CC       H5AC.lo
  CC       H5ACdbg.lo
  CC       H5ACproxy_entry.lo
  CC       H5B.lo
  CC       H5Bcache.lo
  CC       H5Bdbg.lo
  CC       H5B2.lo
  CC       H5B2cache.lo
  CC       H5B2dbg.lo
  CC       H5B2hdr.lo
  CC       H5B2int.lo
  CC       H5B2internal.lo
  CC       H5B2leaf.lo
  CC       H5B2stat.lo
  CC       H5B2test.lo
  CC       H5C.lo
  CC       H5Cdbg.lo
  CC       H5Cepoch.lo
  CC       H5Cimage.lo
  CC       H5Clog.lo
  CC       H5Clog_json.lo
  CC       H5Clog_trace.lo
  CC       H5Cprefetched.lo
  CC       H5Cquery.lo
  CC       H5Ctag.lo
  CC       H5Ctest.lo
  CC       H5CS.lo
  CC       H5CX.lo
  CC       H5D.lo
  CC       H5Dbtree.lo
  CC       H5Dbtree2.lo
  CC       H5Dchunk.lo
  CC       H5Dcompact.lo
  CC       H5Dcontig.lo
  CC       H5Ddbg.lo
  CC       H5Ddeprec.lo
  CC       H5Dearray.lo
  CC       H5Defl.lo
  CC       H5Dfarray.lo
  CC       H5Dfill.lo
  CC       H5Dint.lo
  CC       H5Dio.lo
  CC       H5Dlayout.lo
  CC       H5Dnone.lo
  CC       H5Doh.lo
  CC       H5Dscatgath.lo
  CC       H5Dselect.lo
  CC       H5Dsingle.lo
  CC       H5Dtest.lo
  CC       H5Dvirtual.lo
  CC       H5E.lo
  CC       H5Edeprec.lo
  CC       H5Eint.lo
  CC       H5EA.lo
  CC       H5EAcache.lo
  CC       H5EAdbg.lo
  CC       H5EAdblkpage.lo
  CC       H5EAdblock.lo
  CC       H5EAhdr.lo
  CC       H5EAiblock.lo
  CC       H5EAint.lo
  CC       H5EAsblock.lo
  CC       H5EAstat.lo
  CC       H5EAtest.lo
  CC       H5F.lo
  CC       H5Faccum.lo
  CC       H5Fcwfs.lo
  CC       H5Fdbg.lo
  CC       H5Fdeprec.lo
  CC       H5Fefc.lo
  CC       H5Ffake.lo
  CC       H5Fint.lo
  CC       H5Fio.lo
  CC       H5Fmount.lo
  CC       H5Fquery.lo
  CC       H5Fsfile.lo
  CC       H5Fspace.lo
  CC       H5Fsuper.lo
  CC       H5Fsuper_cache.lo
  CC       H5Ftest.lo
  CC       H5FA.lo
  CC       H5FAcache.lo
  CC       H5FAdbg.lo
  CC       H5FAdblock.lo
  CC       H5FAdblkpage.lo
  CC       H5FAhdr.lo
  CC       H5FAint.lo
  CC       H5FAstat.lo
  CC       H5FAtest.lo
  CC       H5FD.lo
  CC       H5FDcore.lo
  CC       H5FDfamily.lo
  CC       H5FDhdfs.lo
  CC       H5FDint.lo
  CC       H5FDlog.lo
  CC       H5FDmulti.lo
  CC       H5FDsec2.lo
  CC       H5FDspace.lo
  CC       H5FDsplitter.lo
  CC       H5FDstdio.lo
  CC       H5FDtest.lo
  CC       H5FL.lo
  CC       H5FO.lo
  CC       H5FS.lo
  CC       H5FScache.lo
  CC       H5FSdbg.lo
  CC       H5FSint.lo
  CC       H5FSsection.lo
  CC       H5FSstat.lo
  CC       H5FStest.lo
  CC       H5G.lo
  CC       H5Gbtree2.lo
  CC       H5Gcache.lo
  CC       H5Gcompact.lo
  CC       H5Gdense.lo
  CC       H5Gdeprec.lo
  CC       H5Gent.lo
  CC       H5Gint.lo
  CC       H5Glink.lo
  CC       H5Gloc.lo
  CC       H5Gname.lo
  CC       H5Gnode.lo
  CC       H5Gobj.lo
  CC       H5Goh.lo
  CC       H5Groot.lo
  CC       H5Gstab.lo
  CC       H5Gtest.lo
  CC       H5Gtraverse.lo
  CC       H5HF.lo
  CC       H5HFbtree2.lo
  CC       H5HFcache.lo
  CC       H5HFdbg.lo
  CC       H5HFdblock.lo
  CC       H5HFdtable.lo
  CC       H5HFhdr.lo
  CC       H5HFhuge.lo
  CC       H5HFiblock.lo
  CC       H5HFiter.lo
  CC       H5HFman.lo
  CC       H5HFsection.lo
  CC       H5HFspace.lo
  CC       H5HFstat.lo
  CC       H5HFtest.lo
  CC       H5HFtiny.lo
  CC       H5HG.lo
  CC       H5HGcache.lo
  CC       H5HGdbg.lo
  CC       H5HGquery.lo
  CC       H5HL.lo
  CC       H5HLcache.lo
  CC       H5HLdbg.lo
  CC       H5HLint.lo
  CC       H5HLprfx.lo
  CC       H5HLdblk.lo
  CC       H5HP.lo
  CC       H5I.lo
  CC       H5Itest.lo
  CC       H5L.lo
  CC       H5Lexternal.lo
  CC       H5make_libsettings.o
  CCLD     H5make_libsettings
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo -Wl,-Bsymbolic-functions -Wl,-z,relro |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5make_libsettings > H5lib_settings.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5lib_settings.c ; exit 1)
  CC       H5lib_settings.lo
  CC       H5MF.lo
  CC       H5MFaggr.lo
  CC       H5MFdbg.lo
  CC       H5MFsection.lo
  CC       H5MM.lo
  CC       H5MP.lo
  CC       H5MPtest.lo
  CC       H5O.lo
  CC       H5Odeprec.lo
  CC       H5Oainfo.lo
  CC       H5Oalloc.lo
  CC       H5Oattr.lo
  CC       H5Oattribute.lo
  CC       H5Obogus.lo
  CC       H5Obtreek.lo
  CC       H5Ocache.lo
  CC       H5Ocache_image.lo
  CC       H5Ochunk.lo
  CC       H5Ocont.lo
  CC       H5Ocopy.lo
  CC       H5Odbg.lo
  CC       H5Odrvinfo.lo
  CC       H5Odtype.lo
  CC       H5Oefl.lo
  CC       H5Ofill.lo
  CC       H5Oflush.lo
  CC       H5Ofsinfo.lo
  CC       H5Oginfo.lo
  CC       H5Oint.lo
  CC       H5Olayout.lo
  CC       H5Olinfo.lo
  CC       H5Olink.lo
  CC       H5Omessage.lo
  CC       H5Omtime.lo
  CC       H5Oname.lo
  CC       H5Onull.lo
  CC       H5Opline.lo
  CC       H5Orefcount.lo
  CC       H5Osdspace.lo
  CC       H5Oshared.lo
  CC       H5Oshmesg.lo
  CC       H5Ostab.lo
  CC       H5Otest.lo
  CC       H5Ounknown.lo
  CC       H5P.lo
  CC       H5Pacpl.lo
  CC       H5Pdapl.lo
  CC       H5Pdcpl.lo
  CC       H5Pdeprec.lo
  CC       H5Pdxpl.lo
  CC       H5Pencdec.lo
  CC       H5Pfapl.lo
  CC       H5Pfcpl.lo
  CC       H5Pfmpl.lo
  CC       H5Pgcpl.lo
  CC       H5Pint.lo
  CC       H5Plapl.lo
  CC       H5Plcpl.lo
  CC       H5Pocpl.lo
  CC       H5Pocpypl.lo
  CC       H5Pstrcpl.lo
  CC       H5Ptest.lo
  CC       H5PB.lo
  CC       H5PL.lo
  CC       H5PLint.lo
  CC       H5PLpath.lo
  CC       H5PLplugin_cache.lo
  CC       H5R.lo
  CC       H5Rint.lo
  CC       H5Rdeprec.lo
  CC       H5UC.lo
  CC       H5RS.lo
  CC       H5S.lo
  CC       H5Sall.lo
  CC       H5Sdbg.lo
  CC       H5Shyper.lo
  CC       H5Snone.lo
  CC       H5Spoint.lo
  CC       H5Sselect.lo
  CC       H5Stest.lo
  CC       H5SL.lo
  CC       H5SM.lo
  CC       H5SMbtree2.lo
  CC       H5SMcache.lo
  CC       H5SMmessage.lo
  CC       H5SMtest.lo
  CC       H5ST.lo
  CC       H5T.lo
  CC       H5Tarray.lo
  CC       H5Tbit.lo
  CC       H5Tcommit.lo
  CC       H5Tcompound.lo
  CC       H5Tconv.lo
  CC       H5Tcset.lo
  CC       H5Tdbg.lo
  CC       H5Tdeprec.lo
  CC       H5Tenum.lo
  CC       H5Tfields.lo
  CC       H5Tfixed.lo
  CC       H5Tfloat.lo
  CC       H5detect.o
  CCLD     H5detect
LD_LIBRARY_PATH="$LD_LIBRARY_PATH`echo -Wl,-Bsymbolic-functions -Wl,-z,relro |                  \
	sed -e 's/-L/:/g' -e 's/ //g'`"                               \
 ./H5detect > H5Tinit.c  ||                               \
    (test $HDF5_Make_Ignore && echo "*** Error ignored") ||          \
    (rm -f H5Tinit.c ; exit 1)
  CC       H5Tinit.lo
  CC       H5Tnative.lo
  CC       H5Toffset.lo
  CC       H5Toh.lo
  CC       H5Topaque.lo
  CC       H5Torder.lo
  CC       H5Tpad.lo
  CC       H5Tprecis.lo
  CC       H5Tstrpad.lo
  CC       H5Tvisit.lo
  CC       H5Tvlen.lo
  CC       H5TS.lo
  CC       H5VM.lo
  CC       H5WB.lo
  CC       H5Z.lo
  CC       H5Zdeflate.lo
  CC       H5Zfletcher32.lo
  CC       H5Znbit.lo
  CC       H5Zshuffle.lo
  CC       H5Zscaleoffset.lo
  CC       H5Zszip.lo
  CC       H5Ztrans.lo
  CC       H5FDros3.lo
  CC       H5FDs3comms.lo
  CCLD     libhdf5.la
make[3]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/src'
make[2]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/src'
make[2]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/c++'
make[3]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/c++'
make[3]: Nothing to be done for 'build-lib'.
make[3]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/c++'
+ cd src
+ make lib
make[3]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/c++/src'
make[4]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/c++/src'
  CXX      H5Exception.lo
  CXX      H5IdComponent.lo
  CXX      H5DataSpace.lo
  CXX      H5PropList.lo
  CXX      H5Library.lo
  CXX      H5FaccProp.lo
  CXX      H5FcreatProp.lo
  CXX      H5LcreatProp.lo
  CXX      H5LaccProp.lo
  CXX      H5DaccProp.lo
  CXX      H5DxferProp.lo
  CXX      H5DcreatProp.lo
  CXX      H5Location.lo
  CXX      H5AbstractDs.lo
  CXX      H5Attribute.lo
  CXX      H5Object.lo
  CXX      H5OcreatProp.lo
  CXX      H5DataType.lo
  CXX      H5AtomType.lo
  CXX      H5PredType.lo
  CXX      H5EnumType.lo
  CXX      H5IntType.lo
  CXX      H5FloatType.lo
  CXX      H5StrType.lo
  CXX      H5ArrayType.lo
  CXX      H5VarLenType.lo
  CXX      H5CompType.lo
  CXX      H5DataSet.lo
  CXX      H5CommonFG.lo
  CXX      H5Group.lo
  CXX      H5File.lo
  CXXLD    libhdf5_cpp.la
make[4]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/c++/src'
make[3]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/c++/src'
make[2]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/c++'
make[2]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl'
make[3]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl'
make[3]: Nothing to be done for 'build-lib'.
make[3]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl'
+ cd src
+ make lib
make[3]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/src'
make[4]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/src'
  CC       H5DO.lo
  CC       H5DS.lo
  CC       H5IM.lo
  CC       H5LT.lo
  CC       H5LTanalyze.lo
  CC       H5LTparse.lo
  CC       H5PT.lo
  CC       H5TB.lo
  CC       H5LD.lo
  CCLD     libhdf5_hl.la
make[4]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/src'
make[3]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/src'
+ cd c++
+ make lib
make[3]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/c++'
make[4]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/c++'
make[4]: Nothing to be done for 'build-lib'.
make[4]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/c++'
+ cd src
+ make lib
make[4]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/c++/src'
make[5]: Entering directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/c++/src'
  CXX      H5PacketTable.lo
  CXXLD    libhdf5_hl_cpp.la
libtool: warning: '/usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/libcurl.la' seems to be moved
make[5]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/c++/src'
make[4]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/c++/src'
make[3]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl/c++'
make[2]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5/hl'
make[1]: Leaving directory '/tmp/Rtmprz0Zlu/R.INSTALL49d3036b94/Rhdf5lib/src/hdf5'
mkdir -p "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp "hdf5/src"/*.h "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp "hdf5/c++/src"/*.h "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp "hdf5/hl/src"/*.h "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp "hdf5/hl/c++/src"/*.h "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
cp "hdf5/src"/libhdf5.settings "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include"
mkdir -p "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
cp "hdf5/src/.libs/libhdf5.a" "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
cp "hdf5/c++/src/.libs/libhdf5_cpp.a" "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
cp "hdf5/hl/src/.libs/libhdf5_hl.a" "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
cp "hdf5/hl/c++/src/.libs/libhdf5_hl_cpp.a" "/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/"
gcc -I"/usr/share/R/include" -DNDEBUG -I/tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/include       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c Rhdf5lib.c -o Rhdf5lib.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o Rhdf5lib.so Rhdf5lib.o /tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/lib/libhdf5.a -lsz -laec -lz -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-Rhdf5lib/00new/Rhdf5lib/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘Rhdf5lib’ as ‘Rhdf5lib_1.22.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (Rhdf5lib)
* installing *source* package ‘iterators’ ...
** package ‘iterators’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘iterators’ as ‘iterators_1.0.14_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (iterators)
* installing *source* package ‘clue’ ...
** package ‘clue’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c assignment.c -o assignment.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c clue.c -o clue.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c init.c -o init.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c lsap.c -o lsap.o
gcc -I"/usr/share/R/include" -DNDEBUG       -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c trees.c -o trees.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o clue.so assignment.o clue.o init.o lsap.o trees.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-clue/00new/clue/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘clue’ as ‘clue_0.3-65_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (clue)
* installing *source* package ‘GlobalOptions’ ...
** package ‘GlobalOptions’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘GlobalOptions’ as ‘GlobalOptions_0.1.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (GlobalOptions)
* installing *source* package ‘BiocBaseUtils’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘BiocBaseUtils’ as ‘BiocBaseUtils_1.2.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (BiocBaseUtils)
* installing *source* package ‘shape’ ...
** package ‘shape’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘shape’ as ‘shape_1.4.6_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (shape)
* installing *source* package ‘bookdown’ ...
** package ‘bookdown’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘bookdown’ as ‘bookdown_0.37_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (bookdown)
* installing *source* package ‘impute’ ...
** using staged installation
** libs
using Fortran compiler: ‘GNU Fortran (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
gfortran  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong  -c knnimpute.f -o knnimpute.o
knnimpute.f:99:72:

   99 | 20                   pos(k1+1) = pos(k1)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 20 at (1)
knnimpute.f:113:72:

  113 | 35                   pos(k1+1) = pos(k1)
      |                                                                        1
Warning: Fortran 2018 deleted feature: DO termination statement which is not END DO or CONTINUE with label 35 at (1)
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o impute.so knnimpute.o -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-impute/00new/impute/libs
** R
** data
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘impute’ as ‘impute_1.74.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (impute)
* installing *source* package ‘rhdf5filters’ ...
** using staged installation
configuring the BLOSC filter...
x86_CPU=true
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether gcc accepts -g... yes
checking for gcc option to enable C11 features... none needed
checking whether C compiler accepts -msse2... yes
checking whether C compiler accepts -mavx2... yes
checking for gcc __builtin_cpu_init function... (cached) true
checking for x86 sse2 instruction support... yes
checking for x86 avx2 instruction support... yes
configure: creating ./config.status
config.status: creating src/blosc/lib/blosc-1.20.1/Makefile
config.status: creating src/blosc/Makefile
configure:    BZIP2_LIB=bzip2/libH5Zbz2.so
configure:    BLOSC_LIB=blosc/libH5Zblosc.so
configure:    LZF_LIB=lzf/libH5Zlzf.so
configure:    ZSTD_LIB=zstd/libH5Zzstd.so
configure: creating ./config.status
config.status: creating src/blosc/lib/blosc-1.20.1/Makefile
config.status: creating src/blosc/Makefile
config.status: creating src/Makevars
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
make -C zstd
make[1]: Entering directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/zstd'
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c common/debug.c -o common/debug.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c common/entropy_common.c -o common/entropy_common.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c common/error_private.c -o common/error_private.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c common/fse_decompress.c -o common/fse_decompress.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c common/pool.c -o common/pool.o -o common/pool.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c common/threading.c -o common/threading.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c common/xxhash.c -o common/xxhash.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c common/zstd_common.c -o common/zstd_common.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/fse_compress.c -o compress/fse_compress.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/hist.c -o compress/hist.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/huf_compress.c -o compress/huf_compress.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstd_compress.c -o compress/zstd_compress.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstd_compress_literals.c -o compress/zstd_compress_literals.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstd_compress_sequences.c -o compress/zstd_compress_sequences.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstd_compress_superblock.c -o compress/zstd_compress_superblock.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstd_double_fast.c -o compress/zstd_double_fast.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstd_fast.c -o compress/zstd_fast.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstd_lazy.c -o compress/zstd_lazy.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstd_ldm.c -o compress/zstd_ldm.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstd_opt.c -o compress/zstd_opt.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c compress/zstdmt_compress.c -o compress/zstdmt_compress.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c decompress/huf_decompress.c -o decompress/huf_decompress.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c decompress/zstd_ddict.c -o decompress/zstd_ddict.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c decompress/zstd_decompress.c -o decompress/zstd_decompress.o
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I. -I./common -DXXH_NAMESPACE=ZSTD_ -DZSTD_DISABLE_ASM -c decompress/zstd_decompress_block.c -o decompress/zstd_decompress_block.o
rm -f libzstd.a
ar cq libzstd.a common/debug.o common/entropy_common.o common/error_private.o common/fse_decompress.o common/pool.o common/threading.o common/xxhash.o common/zstd_common.o compress/fse_compress.o compress/hist.o compress/huf_compress.o compress/zstd_compress.o compress/zstd_compress_literals.o compress/zstd_compress_sequences.o compress/zstd_compress_superblock.o compress/zstd_double_fast.o compress/zstd_fast.o compress/zstd_lazy.o compress/zstd_ldm.o compress/zstd_opt.o compress/zstdmt_compress.o decompress/huf_decompress.o decompress/zstd_ddict.o decompress/zstd_decompress.o decompress/zstd_decompress_block.o
ranlib libzstd.a
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -shared H5Zzstd.c -I"/tmp/tmp/built/Rhdf5lib/include" \
libzstd.a -Wl,-Bsymbolic-functions -Wl,-z,relro -o libH5Zzstd.so
make[1]: Leaving directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/zstd'
make -C blosc
make[1]: Entering directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/blosc'
make -C lib/snappy-1.1.1
make[2]: Entering directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/blosc/lib/snappy-1.1.1'
g++ -std=gnu++17 -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -c snappy.cc
g++ -std=gnu++17 -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -c snappy-c.cc
g++ -std=gnu++17 -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -c snappy-sinksource.cc
g++ -std=gnu++17 -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -c snappy-stubs-internal.cc
make[2]: Leaving directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/blosc/lib/snappy-1.1.1'
make -C lib/lz4-1.9.4
make[2]: Entering directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/blosc/lib/lz4-1.9.4'
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -c lz4.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -c lz4hc.c
make[2]: Leaving directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/blosc/lib/lz4-1.9.4'
make -C lib/blosc-1.20.1 all
make[2]: Entering directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/blosc/lib/blosc-1.20.1'
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -c bitshuffle-avx2.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -c shuffle-avx2.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -c bitshuffle-sse2.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -c shuffle-sse2.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -c bitshuffle-generic.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -c shuffle-generic.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -DSHUFFLE_SSE2_ENABLED -DSHUFFLE_AVX2_ENABLED -c shuffle.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -c blosclz.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -c blosc.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -I"/tmp/tmp/built/Rhdf5lib/include" -I../lz4-1.9.4 -I../snappy-1.1.1 -I../../../zstd -msse2 -mavx2 -c fastcopy.c
make[2]: Leaving directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/blosc/lib/blosc-1.20.1'
rm -f libblosc.a
ar cq libblosc.a lib/blosc-1.20.1/bitshuffle-avx2.o lib/blosc-1.20.1/blosc.o lib/blosc-1.20.1/shuffle-avx2.o lib/blosc-1.20.1/shuffle-sse2.o lib/blosc-1.20.1/bitshuffle-generic.o lib/blosc-1.20.1/blosclz.o lib/blosc-1.20.1/shuffle.o lib/blosc-1.20.1/bitshuffle-sse2.o lib/blosc-1.20.1/fastcopy.o lib/blosc-1.20.1/shuffle-generic.o lib/snappy-1.1.1/snappy.o lib/snappy-1.1.1/snappy-c.o lib/snappy-1.1.1/snappy-sinksource.o lib/snappy-1.1.1/snappy-stubs-internal.o lib/lz4-1.9.4/lz4.o lib/lz4-1.9.4/lz4hc.o 
ranlib libblosc.a
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -c -o H5Zblosc.o H5Zblosc.c \
-I"/tmp/tmp/built/Rhdf5lib/include" -I./lib/blosc-1.20.1
g++ -std=gnu++17 -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -Wl,-Bsymbolic-functions -Wl,-z,relro -shared -o libH5Zblosc.so H5Zblosc.o \
libblosc.a ../zstd/libzstd.a -lz
make[1]: Leaving directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/blosc'
make -C bzip2
make[1]: Entering directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/bzip2'
make -C bzip2-1.0.8
make[2]: Entering directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/bzip2/bzip2-1.0.8'
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -D_FILE_OFFSET_BITS=64 -c blocksort.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -D_FILE_OFFSET_BITS=64 -c huffman.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -D_FILE_OFFSET_BITS=64 -c crctable.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -D_FILE_OFFSET_BITS=64 -c randtable.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -D_FILE_OFFSET_BITS=64 -c compress.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -D_FILE_OFFSET_BITS=64 -c decompress.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -D_FILE_OFFSET_BITS=64 -c bzlib.c
rm -f libbz2.a
ar cq libbz2.a blocksort.o huffman.o crctable.o randtable.o compress.o decompress.o bzlib.o
ranlib libbz2.a
make[2]: Leaving directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/bzip2/bzip2-1.0.8'
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -shared H5Zbzip2.c -I"/tmp/tmp/built/Rhdf5lib/include" \
-I./bzip2-1.0.8/ ./bzip2-1.0.8/libbz2.a -Wl,-Bsymbolic-functions -Wl,-z,relro -o libH5Zbz2.so
make[1]: Leaving directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/bzip2'
make -C lzf
make[1]: Entering directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/lzf'
make -C lzf
make[2]: Entering directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/lzf/lzf'
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -c lzf_c.c
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -c lzf_d.c
rm -f liblzf.a
ar cq liblzf.a lzf_c.o lzf_d.o
ranlib liblzf.a
make[2]: Leaving directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/lzf/lzf'
gcc -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic -shared H5Zlzf.c -I"/tmp/tmp/built/Rhdf5lib/include" \
-I./lzf/ ./lzf/liblzf.a -Wl,-Bsymbolic-functions -Wl,-z,relro -o libH5Zlzf.so
make[1]: Leaving directory '/tmp/RtmprvtZ43/R.INSTALL46757ed58ca8/rhdf5filters/src/lzf'
mkdir -p "/tmp/tmp/built/00LOCK-rhdf5filters/00new/rhdf5filters/lib/"
cp bzip2/libH5Zbz2.so "/tmp/tmp/built/00LOCK-rhdf5filters/00new/rhdf5filters/lib/"
cp blosc/libH5Zblosc.so "/tmp/tmp/built/00LOCK-rhdf5filters/00new/rhdf5filters/lib/"
cp lzf/libH5Zlzf.so "/tmp/tmp/built/00LOCK-rhdf5filters/00new/rhdf5filters/lib/"
cp zstd/libH5Zzstd.so "/tmp/tmp/built/00LOCK-rhdf5filters/00new/rhdf5filters/lib/"
gcc -I"/usr/share/R/include" -DNDEBUG -I"/tmp/tmp/built/Rhdf5lib/include" -I'/tmp/tmp/built/Rhdf5lib/include'    -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c rhdf5filters.c -o rhdf5filters.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o rhdf5filters.so rhdf5filters.o -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-rhdf5filters/00new/rhdf5filters/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘rhdf5filters’ as ‘rhdf5filters_1.12.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (rhdf5filters)
* installing *source* package ‘GetoptLong’ ...
** package ‘GetoptLong’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘GetoptLong’ as ‘GetoptLong_1.0.5_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (GetoptLong)
* installing *source* package ‘MultiAssayExperiment’ ...
** using staged installation
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘MultiAssayExperiment’ as ‘MultiAssayExperiment_1.26.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (MultiAssayExperiment)
* installing *source* package ‘circlize’ ...
** package ‘circlize’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘circlize’ as ‘circlize_0.4.15_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (circlize)
* installing *source* package ‘foreach’ ...
** package ‘foreach’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘foreach’ as ‘foreach_1.5.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (foreach)
* installing *source* package ‘BiocStyle’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘BiocStyle’ as ‘BiocStyle_2.28.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (BiocStyle)
* installing *source* package ‘rhdf5’ ...
** using staged installation
configure: creating ./config.status
config.status: creating src/external_filters.h
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using C++ compiler: ‘g++ (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5.c -o H5.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5A.c -o H5A.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5D.c -o H5D.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5E.c -o H5E.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5F.c -o H5F.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5G.c -o H5G.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5I.c -o H5I.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5L.c -o H5L.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5O.c -o H5O.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5P.c -o H5P.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5R.c -o H5R.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5S.c -o H5S.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5S_extras.c -o H5S_extras.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5T.c -o H5T.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5Z.c -o H5Z.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5constants.c -o H5constants.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c HandleList.cpp -o HandleList.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c HandleListWrap.c -o HandleListWrap.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c bit64conversion.c -o bit64conversion.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c external_filters.c -o external_filters.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5dump.c -o h5dump.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5ls.c -o h5ls.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5testLock.c -o h5testLock.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5writeDataFrame.c -o h5writeDataFrame.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c printdatatype.c -o printdatatype.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c utils.c -o utils.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c wrap.c -o wrap.o
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o rhdf5.so H5.o H5A.o H5D.o H5E.o H5F.o H5G.o H5I.o H5L.o H5O.o H5P.o H5R.o H5S.o H5S_extras.o H5T.o H5Z.o H5constants.o HandleList.o HandleListWrap.o bit64conversion.o external_filters.o h5dump.o h5ls.o h5testLock.o h5writeDataFrame.o printdatatype.o utils.o wrap.o /tmp/tmp/built/Rhdf5lib/lib/libhdf5.a -lcrypto -lcurl -lsz -laec -lz -ldl -lm -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-rhdf5/00new/rhdf5/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘rhdf5’ as ‘rhdf5_2.44.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (rhdf5)
* installing *source* package ‘doParallel’ ...
** package ‘doParallel’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘doParallel’ as ‘doParallel_1.0.17_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (doParallel)
* installing *source* package ‘glmnet’ ...
** package ‘glmnet’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using Fortran compiler: ‘GNU Fortran (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using C++ compiler: ‘g++ (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
using C++17
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c RcppExports.cpp -o RcppExports.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
RcppExports.cpp:25:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, 2>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:17:8:   required from ‘struct Eigen::internal::traits<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
gfortran  -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong  -c coxnet5dpclean.f -o coxnet5dpclean.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c elnet_exp.cpp -o elnet_exp.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >’
elnet_exp.cpp:44:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
elnet_exp.cpp:44:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, 2>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:17:8:   required from ‘struct Eigen::internal::traits<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:31:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, 1, -1, false, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:34:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:24:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:24:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/base.hpp:12:20:   required from ‘void glmnetpp::ElnetDriverBase::normalize_penalty(VType&&) const [with VType = Eigen::Matrix<double, -1, 1>&]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:402:13:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:38:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorBlock.h:56:47:   required from ‘class Eigen::VectorBlock<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:18:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:39:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:36:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:15:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:52:29:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:56:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:41:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:48:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:35:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Matrix<double, -1, -1>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:430:16:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:20:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator*=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:31:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:338:33:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:36:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:47:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:56:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:276:47:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Eigen::DenseBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:51:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:60:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:399:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:110:60:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:19:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:110:60:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:19:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:298:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:282:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:470:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1004:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:952:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:23:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:29:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:343:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:344:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:27:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:96:31:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:159:16:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:23:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:26:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:474:25:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:522:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Matrix<double, -1, 1>; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Matrix<double, -1, 1> >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:296:18:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:174:38:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:40:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:48:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:31:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:36:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:31:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:19:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:19:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:31:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:19:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:163:21:   required from ‘Eigen::SparseCompressedBase<Derived>::InnerIterator::InnerIterator(const Eigen::SparseCompressedBase<Derived>&, Eigen::Index) [with Derived = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:514:129:   required from ‘Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>::InnerVectorInnerIterator::InnerVectorInnerIterator(const Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>&, Eigen::Index) [with ArgType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; int BlockRows = -1; int BlockCols = 1; bool InnerPanel = true; typename Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:30:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:34:67:   required from ‘Derived& Eigen::ArrayBase<Derived>::operator-=(const Scalar&) [with Derived = Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; Eigen::ArrayBase<Derived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:50:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:50:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:82:44:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:88:40:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:86:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:58:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:73:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:9:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:87:   required from ‘auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::prediction() const [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_base.hpp:140:16:   required from ‘void glmnetpp::ElnetPathPoissonBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:9:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:13:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:26:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:43:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:88:29:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:89:19:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:32:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:41:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   required from ‘static typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::compute_xv(const XType&, const WType&) [with XType = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:71:52:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:336:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:48:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:22:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:34:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:19:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:23:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:35:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:54:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:47:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:27:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:46:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:35:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:9:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:354:30:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:9:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:73:69:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, GType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, ISType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Matrix<double, -1, -1>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ISType = Eigen::Matrix<int, -1, 1>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<int>, Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:327:30:   required from ‘Derived& Eigen::DenseBase<Derived>::setConstant(const Scalar&) [with Derived = Eigen::Matrix<int, -1, 1>; Eigen::DenseBase<Derived>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:501:10:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:394:38:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialMultiClassBase::process_point_fit(const FitPackType&, PathConfigPackType&&, PointConfigPackType&&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1402:14:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:76:62:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:56:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:44:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:14:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const RType&, const VType&) const [with RType = Eigen::Matrix<double, -1, 1>; VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:77:64:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, const GType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:130:48:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:163:38:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:57:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:69:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:78:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:136:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:139:68:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:137:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:137:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:78:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::construct(typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t, InitFType, Init2FType, UpdateDvrFType, AbsGradFType) [with InitFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>; Init2FType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda()>; UpdateDvrFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; AbsGradFType = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalPoissonBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:168:65:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:60:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:69:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:73:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:81:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:21:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:169:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:169:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:29:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:22:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:16:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:27:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:298:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:470:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1004:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:952:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:568:53:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:354:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:89:19:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:23:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:26:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:474:25:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:15:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:15:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:25:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, RType&&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1166:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:589:25:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:35:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:42:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:48:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:15:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:56:7:   required from ‘class Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double>, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:661:15:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:47:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:47:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:21:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:605:36:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:19:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:39:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:44:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:26:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:39:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:57:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:47:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:80:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:86:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:53:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:82:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:88:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:113:48:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:43&)> [with auto:43 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1381:54:   required from ‘void glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::update_with_new_weights(typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, const VType&, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t&) [with VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:121:55:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:13:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:11:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:137:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:50&)> [with auto:50 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:101:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:65)> [with auto:65 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:65)>; SkipPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(bool, bool)>::<lambda(auto:66)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:100:51:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t&, IAType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:38:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:115:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:147:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:38:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:22:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:40:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:40:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:59:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:9:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:68:81:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:11:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:9:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:643:34:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:645:27:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:648:50:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:19:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1007:53:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   required from ‘glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::update_irls(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, UpdateYPredFType, UpdatePPredFType, InitResidFType, ComputeGradFType) [with UpdateYPredFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, auto:42&)>; UpdatePPredFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(auto:43&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]::<lambda(auto:34)> [with auto:34 = int]’
/usr/include/c++/9/bits/stl_algo.h:3882:5:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:51:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:51:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:62:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:84:33:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:39:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:50:35:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:50:60:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>; U = Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>; Eigen::internal::dot_nocheck<T, U, true>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::internal::redux_evaluator<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:65:36:   required from ‘Eigen::Index Eigen::SparseCompressedBase<Derived>::nonZeros() const [with Derived = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:163:21:   required from ‘Eigen::SparseCompressedBase<Derived>::InnerIterator::InnerIterator(const Eigen::SparseCompressedBase<Derived>&, Eigen::Index) [with Derived = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:514:129:   required from ‘Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>::InnerVectorInnerIterator::InnerVectorInnerIterator(const Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>&, Eigen::Index) [with ArgType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; int BlockRows = -1; int BlockCols = 1; bool InnerPanel = true; typename Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:30:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:60:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:54:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Matrix<double, -1, -1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:115:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:147:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:531:48:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&, typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:546:9:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:19:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:115:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:147:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:155:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:156:37:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, DestType&&) const [with DestType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:162:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:55:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:38:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t, const PointPackType&, DiffType&&) [with typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:38:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:9:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:439:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:88:14:   required from ‘static auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::compute_sp_cov(const X1Type&, const X2Type&, const WType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t) [with X1Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; X2Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:65:42:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::update_active(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::index_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:81:25:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:13:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:107:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:522:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:99:47:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:13:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:269:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:13:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:91:45:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:89:39:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:438:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1205:25:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:127:53:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:80:43:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:9:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:274:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:138:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:58:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:142:43:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:322:14:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:405:26:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:89:39:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:219:27:   required from ‘static constexpr bool glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::equal(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) [with T1 = Eigen::Matrix<double, -1, 1>; T2 = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:75:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:80:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:91:43:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/binomial_multi_class_group.hpp:34:37:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:138:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:9:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t, const PointConfigPack&, DiffType&&) [with typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:9:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:330:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:9:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:49:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:570:18:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:21:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:610:21:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:21:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:9:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t, const PointPackType&, DiffType&&) [with typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t = glmnetpp::util::control_flow; typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t, const ComputeGradFType&) [with ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, AType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, GCurrType&&, GNextType&&, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t, const ComputeGradFType&) [with ComputeGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_beta(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t, const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::index_t = int]::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:57:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:736:20:   required from ‘void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Functor = Eigen::internal::assign_op<int, int>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from ‘static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Functor = Eigen::internal::assign_op<int, int>; Weak = void]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from ‘void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Func = Eigen::internal::assign_op<int, int>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from ‘void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >; Func = Eigen::internal::assign_op<int, int>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from ‘void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Block<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::linspaced_op<int, __vector(2) long long int>, Eigen::Matrix<int, -1, 1> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Assign.h:66:28:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:499,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘struct Eigen::internal::general_matrix_vector_product<long int, double, Eigen::internal::const_blas_data_mapper<double, long int, 1>, 1, false, double, Eigen::internal::const_blas_data_mapper<double, long int, 0>, false, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:339:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   required from ‘static void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::run(DstXprType&, const SrcXprType&, const Eigen::internal::assign_op<Scalar, Scalar>&) [with DstXprType = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int Options = 0; Scalar = double; Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::SrcXprType = Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:836:49:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:351:71: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  351 | typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;
      |                                                                       ^~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:352:71: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  352 | typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;
      |                                                                       ^~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:353:71: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  353 | typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;
      |                                                                       ^~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   [ skipping 16 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:22:9:   required from ‘class Eigen::internal::SparseTransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 1024>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:45:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:194:40:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::SparseShape, ProductType>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int ProductType = 7; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::SparseShape, ProductType>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:194:40:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:13:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:218:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:499,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘static void Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::run(Index, Index, const LhsMapper&, const RhsMapper&, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar*, Index, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar) [with Index = long int; LhsScalar = double; LhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 1>; bool ConjugateLhs = false; RhsScalar = double; RhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 0>; bool ConjugateRhs = false; int Version = 0; Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar = double]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:339:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   required from ‘static void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::run(DstXprType&, const SrcXprType&, const Eigen::internal::assign_op<Scalar, Scalar>&) [with DstXprType = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int Options = 0; Scalar = double; Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, typename Eigen::internal::enable_if<((Options == Eigen::DefaultProduct) || (Options == Eigen::AliasFreeProduct))>::type>::SrcXprType = Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:836:49:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:385:62: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  385 |   conj_helper<LhsPacket,RhsPacket,ConjugateLhs,ConjugateRhs> pcj;
      |                                                              ^~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:385:62: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:438:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:27:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_dlx(typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:87:9:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_cov.hpp:55:75:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:13:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:53:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:98:43:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:703:14:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:45:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:21:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:371,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/Memory.h: In instantiation of ‘Index Eigen::internal::first_default_aligned(const Scalar*, Index) [with Scalar = double; Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/BlasUtil.h:263:43:   required from ‘Index Eigen::internal::blas_data_mapper<Scalar, Index, StorageOrder, AlignmentType, 1>::firstAligned(Index) const [with Scalar = const double; Index = long int; int StorageOrder = 0; int AlignmentType = 0]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:400:9:   required from ‘static void Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::run(Index, Index, const LhsMapper&, const RhsMapper&, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar*, Index, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar) [with Index = long int; LhsScalar = double; LhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 1>; bool ConjugateLhs = false; RhsScalar = double; RhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 0>; bool ConjugateRhs = false; int Version = 0; Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:339:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:9:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:385:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/Memory.h:470:10: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  470 |   return first_aligned<unpacket_traits<DefaultPacketType>::alignment>(array, size);
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:349:39:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:416:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:104:1:   required from ‘ResultType Eigen::internal::member_sum<ResultType>::operator()(const XprType&) const [with XprType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; ResultType = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1318:40:   required from ‘const Scalar Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::coeff(Eigen::Index) const [with ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double>; int Direction = 1; Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:637:5:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:104:1:   required from ‘ResultType Eigen::internal::member_sum<ResultType>::operator()(const XprType&) const [with XprType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; ResultType = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1316:40:   required from ‘const Scalar Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::coeff(Eigen::Index) const [with ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double>; int Direction = 1; Eigen::internal::evaluator<Eigen::PartialReduxExpr<ArgType, MemberOp, Direction> >::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:637:5:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:20:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:13:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:162:67:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c glmnet_init.cpp -o glmnet_init.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c internal.cpp -o internal.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c pb.c -o pb.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c pb_exp.cpp -o pb_exp.o
g++ -std=gnu++17 -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/RcppEigen/include' -I'/usr/local/lib/R/site-library/Rcpp/include'    -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c wls_exp.cpp -o wls_exp.o
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:397,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:60:39: warning: ignoring attributes on template argument ‘__m128’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   60 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:61:40: warning: ignoring attributes on template argument ‘__m128i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   61 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:62:40: warning: ignoring attributes on template argument ‘__m128d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   62 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:161:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  161 | template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4, alignment=Aligned16}; typedef Packet4f half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:162:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  162 | template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2, alignment=Aligned16}; typedef Packet2d half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:163:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  163 | template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4, alignment=Aligned16}; typedef Packet4i half; };
      |                                           ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:718:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  718 | struct palign_impl<Offset,Packet4f>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:741:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  741 | struct palign_impl<Offset,Packet4i>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:764:35: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  764 | struct palign_impl<Offset,Packet2d>
      |                                   ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:778:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  778 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:783:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  783 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:790:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4i’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  790 | ptranspose(PacketBlock<Packet4i,4>& kernel) {
      |                                  ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:377,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:232:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  232 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:15:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   15 |   template<> struct conj_helper<PACKET_REAL, PACKET_CPLX, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:22:70: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   22 |   template<> struct conj_helper<PACKET_CPLX, PACKET_REAL, false,false> {                                          \
      |                                                                      ^
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:417:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  417 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:24:46:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__vector(4) float’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<float>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:27:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__vector(4) float’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:242:7:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:88:47:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:250:7:   required from ‘class Eigen::Quaternion<double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SSE.h:92:3:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:168:29:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<int, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:115:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<int, -1, 1>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<Eigen::Matrix<int, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:178:72:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<int, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<int, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<int, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/unsupported/Eigen/src/KroneckerProduct/KroneckerTensorProduct.h:179:36:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:24:30:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:54:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:109:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
wls_exp.cpp:40:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:221:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >’
wls_exp.cpp:40:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:370,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<int, 2>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:17:8:   required from ‘struct Eigen::internal::traits<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  187 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:187:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) long long int>::half’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:205:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  205 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:300:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:551:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<int, 2, 1>, 3>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<int, 2, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<int, 2, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:70:30:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:150:32:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
glmnetpp/include/glmnetpp_bits/elnet_point/sp_gaussian_wls.hpp:7:8:   required from ‘struct glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:125:17:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:26:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:34:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:43:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:52:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:32:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:56:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:298:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:470:10:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1004:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:952:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:336:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:17:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:409:54:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:336:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:17:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:48:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::Map<Eigen::Matrix<double, -1, 1> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:83:14:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1337:8:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1416:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:522:55:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:478:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:92:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:9:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:9:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:110:27:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:92:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/SparseCore:37,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Sparse:26,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:31,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:9:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t, const PointPackType&) [with typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:70:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:37:52:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:66:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:45:7:   required from ‘Eigen::CwiseBinaryOpImpl<BinaryOp, Lhs, Rhs, Eigen::Sparse>::CwiseBinaryOpImpl() [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; Lhs = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Rhs = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:105:49:   required from ‘Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::CwiseBinaryOp(const Lhs&, const Rhs&, const BinaryOp&) [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; LhsType = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; RhsType = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Lhs = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::Rhs = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:693:62:   required from ‘const typename Eigen::SparseMatrixBase<Derived>::CwiseProductDenseReturnType<OtherDerived>::Type Eigen::SparseMatrixBase<Derived>::cwiseProduct(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::SparseMatrixBase<Derived>::CwiseProductDenseReturnType<OtherDerived>::Type = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:225:63:   required from ‘static Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Derived, 3, 0>::run(const Derived&, const Func&) [with Func = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::internal::redux_evaluator<Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::internal::redux_impl<Func, Derived, 3, 0>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<int, int>; Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/Redux.h:453:73:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<const Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::internal::traits<T>::Scalar = int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:65:36:   required from ‘Eigen::Index Eigen::SparseCompressedBase<Derived>::nonZeros() const [with Derived = Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:163:21:   required from ‘Eigen::SparseCompressedBase<Derived>::InnerIterator::InnerIterator(const Eigen::SparseCompressedBase<Derived>&, Eigen::Index) [with Derived = Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:514:129:   required from ‘Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>::InnerVectorInnerIterator::InnerVectorInnerIterator(const Eigen::internal::unary_evaluator<Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>, Eigen::internal::IteratorBased>&, Eigen::Index) [with ArgType = const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >; int BlockRows = -1; int BlockCols = 1; bool InnerPanel = true; typename Eigen::Block<ArgType, BlockRows, BlockCols, InnerPanel>::Scalar = double; Eigen::Index = long int]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:30:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:134:27:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t, AType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, GType&, IAType&, IYType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, MMType&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t&, typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t = double; typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:650:34: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<int>::type’ {aka ‘__vector(2) long long int’} [-Wignored-attributes]
  650 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:445,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:99:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:681:51:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:665:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:960:8: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
  960 |   enum {
      |        ^
In file included from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Core:439,
                 from /usr/local/lib/R/site-library/RcppEigen/include/Eigen/Dense:1,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigenForward.h:30,
                 from /usr/local/lib/R/site-library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:327:30:   required from ‘Derived& Eigen::DenseBase<Derived>::setConstant(const Scalar&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Eigen::DenseBase<Derived>::Scalar = double]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:501:10:   required from ‘Derived& Eigen::DenseBase<Derived>::setZero() [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >]’
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/SparseCore/SparseAssign.h:143:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:21:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:32:   required from here
/usr/local/lib/R/site-library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:55:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__vector(2) double’} [-Wignored-attributes]
   55 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
g++ -std=gnu++17 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o glmnet.so RcppExports.o coxnet5dpclean.o elnet_exp.o glmnet_init.o internal.o pb.o pb_exp.o wls_exp.o -lgfortran -lm -lquadmath -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-glmnet/00new/glmnet/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘glmnet’ as ‘glmnet_4.1-8_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (glmnet)
* installing *source* package ‘HDF5Array’ ...
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0’
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c S4Vectors_stubs.c -o S4Vectors_stubs.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5File.c -o H5File.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c global_errmsg_buf.c -o global_errmsg_buf.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c H5DSetDescriptor.c -o H5DSetDescriptor.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5dimscales.c -o h5dimscales.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c uaselection.c -o uaselection.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5mread_helpers.c -o h5mread_helpers.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5mread_startscounts.c -o h5mread_startscounts.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c ChunkIterator.c -o ChunkIterator.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5mread_index.c -o h5mread_index.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5mread_sparse.c -o h5mread_sparse.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5mread.c -o h5mread.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c h5summarize.c -o h5summarize.o
gcc -I"/usr/share/R/include" -DNDEBUG  -I'/usr/local/lib/R/site-library/S4Vectors/include' -I'/tmp/tmp/built/Rhdf5lib/include'     -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-k088M3/r-base-4.3.1=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2  -c R_init_HDF5Array.c -o R_init_HDF5Array.o
gcc -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o HDF5Array.so S4Vectors_stubs.o H5File.o global_errmsg_buf.o H5DSetDescriptor.o h5dimscales.o uaselection.o h5mread_helpers.o h5mread_startscounts.o ChunkIterator.o h5mread_index.o h5mread_sparse.o h5mread.o h5summarize.o R_init_HDF5Array.o /tmp/tmp/built/Rhdf5lib/lib/libhdf5_hl.a /tmp/tmp/built/Rhdf5lib/lib/libhdf5.a -lcrypto -lcurl -lsz -laec -lz -ldl -lm -L/usr/lib/R/lib -lR
installing to /tmp/tmp/built/00LOCK-HDF5Array/00new/HDF5Array/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘HDF5Array’ as ‘HDF5Array_1.28.1_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (HDF5Array)
* installing *source* package ‘ComplexHeatmap’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘ComplexHeatmap’ as ‘ComplexHeatmap_2.16.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (ComplexHeatmap)
* installing *source* package ‘curatedTCGAData’ ...
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘curatedTCGAData’ as ‘curatedTCGAData_1.22.2_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (curatedTCGAData)
* installing *source* package ‘AMARETTO’ ...
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* creating tarball
packaged installation of ‘AMARETTO’ as ‘AMARETTO_1.16.0_R_x86_64-pc-linux-gnu.tar.gz’
* DONE (AMARETTO)

The downloaded source packages are in
	‘/tmp/RtmpnWgfOs/downloaded_packages’
Old packages: 'BH', 'bigrquery', 'brew', 'brio', 'bslib', 'cli', 'cluster',
  'commonmark', 'cowplot', 'cpp11', 'crosstalk', 'curl', 'data.table', 'DBI',
  'dbplyr', 'deldir', 'desc', 'digest', 'dplyr', 'dqrng', 'DT', 'evaluate',
  'fansi', 'filelock', 'FNN', 'foreign', 'future', 'future.apply',
  'GenomicRanges', 'gert', 'ggplot2', 'ggrepel', 'ggridges', 'glue', 'gplots',
  'gtools', 'haven', 'htmltools', 'htmlwidgets', 'httpuv', 'httr2', 'igraph',
  'interp', 'jsonlite', 'knitr', 'later', 'lattice', 'leiden', 'lifecycle',
  'listenv', 'MASS', 'Matrix', 'matrixStats', 'mgcv', 'nlme', 'patchwork',
  'pbdZMQ', 'pkgbuild', 'pkgload', 'plotly', 'processx', 'progress', 'ps',
  'ragg', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW',
  'RCurl', 'readr', 'reprex', 'reticulate', 'rlang', 'roxygen2', 'rpart',
  'rprojroot', 'RSQLite', 'Rtsne', 'sass', 'scales', 'sctransform', 'scuttle',
  'Seurat', 'SeuratObject', 'shiny', 'sp', 'spatstat.data', 'spatstat.explore',
  'spatstat.geom', 'spatstat.random', 'spatstat.sparse', 'spatstat.utils',
  'stringi', 'stringr', 'systemfonts', 'testthat', 'textshaping', 'tidyr',
  'timechange', 'tinytex', 'utf8', 'uuid', 'vctrs', 'vroom', 'waldo', 'withr',
  'xfun', 'XML', 'xml2', 'yaml', 'zip'

real	7m26.051s
user	6m40.389s
sys	1m13.980s
